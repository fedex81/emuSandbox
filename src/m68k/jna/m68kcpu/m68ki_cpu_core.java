package m68k.jna.m68kcpu;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : m68kcpu.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("m68kcpu") 
public class m68ki_cpu_core extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * CPU Type: 68000, 68008, 68010, 68EC020, 68020, 68EC030, 68030, 68EC040, or 68040<br>
	 * C type : uint
	 */
	@Field(0) 
	public int cpu_type() {
		return this.io.getIntField(this, 0);
	}
	/**
	 * CPU Type: 68000, 68008, 68010, 68EC020, 68020, 68EC030, 68030, 68EC040, or 68040<br>
	 * C type : uint
	 */
	@Field(0) 
	public m68ki_cpu_core cpu_type(int cpu_type) {
		this.io.setIntField(this, 0, cpu_type);
		return this;
	}
	/**
	 * Data and Address Registers<br>
	 * C type : uint[16]
	 */
	@Array({16}) 
	@Field(1) 
	public Pointer<Integer > dar() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * Saved Data and Address Registers (pushed onto the<br>
	 * stack when a bus error occurs)<br>
	 * C type : uint[16]
	 */
	@Array({16}) 
	@Field(2) 
	public Pointer<Integer > dar_save() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * Previous program counter<br>
	 * C type : uint
	 */
	@Field(3) 
	public int ppc() {
		return this.io.getIntField(this, 3);
	}
	/**
	 * Previous program counter<br>
	 * C type : uint
	 */
	@Field(3) 
	public m68ki_cpu_core ppc(int ppc) {
		this.io.setIntField(this, 3, ppc);
		return this;
	}
	/**
	 * Program Counter<br>
	 * C type : uint
	 */
	@Field(4) 
	public int pc() {
		return this.io.getIntField(this, 4);
	}
	/**
	 * Program Counter<br>
	 * C type : uint
	 */
	@Field(4) 
	public m68ki_cpu_core pc(int pc) {
		this.io.setIntField(this, 4, pc);
		return this;
	}
	/**
	 * User, Interrupt, and Master Stack Pointers<br>
	 * C type : uint[7]
	 */
	@Array({7}) 
	@Field(5) 
	public Pointer<Integer > sp() {
		return this.io.getPointerField(this, 5);
	}
	/**
	 * Vector Base Register (m68010+)<br>
	 * C type : uint
	 */
	@Field(6) 
	public int vbr() {
		return this.io.getIntField(this, 6);
	}
	/**
	 * Vector Base Register (m68010+)<br>
	 * C type : uint
	 */
	@Field(6) 
	public m68ki_cpu_core vbr(int vbr) {
		this.io.setIntField(this, 6, vbr);
		return this;
	}
	/**
	 * Source Function Code Register (m68010+)<br>
	 * C type : uint
	 */
	@Field(7) 
	public int sfc() {
		return this.io.getIntField(this, 7);
	}
	/**
	 * Source Function Code Register (m68010+)<br>
	 * C type : uint
	 */
	@Field(7) 
	public m68ki_cpu_core sfc(int sfc) {
		this.io.setIntField(this, 7, sfc);
		return this;
	}
	/**
	 * Destination Function Code Register (m68010+)<br>
	 * C type : uint
	 */
	@Field(8) 
	public int dfc() {
		return this.io.getIntField(this, 8);
	}
	/**
	 * Destination Function Code Register (m68010+)<br>
	 * C type : uint
	 */
	@Field(8) 
	public m68ki_cpu_core dfc(int dfc) {
		this.io.setIntField(this, 8, dfc);
		return this;
	}
	/**
	 * Cache Control Register (m68020, unemulated)<br>
	 * C type : uint
	 */
	@Field(9) 
	public int cacr() {
		return this.io.getIntField(this, 9);
	}
	/**
	 * Cache Control Register (m68020, unemulated)<br>
	 * C type : uint
	 */
	@Field(9) 
	public m68ki_cpu_core cacr(int cacr) {
		this.io.setIntField(this, 9, cacr);
		return this;
	}
	/**
	 * Cache Address Register (m68020, unemulated)<br>
	 * C type : uint
	 */
	@Field(10) 
	public int caar() {
		return this.io.getIntField(this, 10);
	}
	/**
	 * Cache Address Register (m68020, unemulated)<br>
	 * C type : uint
	 */
	@Field(10) 
	public m68ki_cpu_core caar(int caar) {
		this.io.setIntField(this, 10, caar);
		return this;
	}
	/**
	 * Instruction Register<br>
	 * C type : uint
	 */
	@Field(11) 
	public int ir() {
		return this.io.getIntField(this, 11);
	}
	/**
	 * Instruction Register<br>
	 * C type : uint
	 */
	@Field(11) 
	public m68ki_cpu_core ir(int ir) {
		this.io.setIntField(this, 11, ir);
		return this;
	}
	/**
	 * Failed to convert value fpr of type floatx80[8]<br>
	 * C type : floatx80[8]
	 */
	/**
	 * FPU Instruction Address Register (m68040)<br>
	 * C type : uint
	 */
	@Field(13) 
	public int fpiar() {
		return this.io.getIntField(this, 13);
	}
	/**
	 * FPU Instruction Address Register (m68040)<br>
	 * C type : uint
	 */
	@Field(13) 
	public m68ki_cpu_core fpiar(int fpiar) {
		this.io.setIntField(this, 13, fpiar);
		return this;
	}
	/**
	 * FPU Status Register (m68040)<br>
	 * C type : uint
	 */
	@Field(14) 
	public int fpsr() {
		return this.io.getIntField(this, 14);
	}
	/**
	 * FPU Status Register (m68040)<br>
	 * C type : uint
	 */
	@Field(14) 
	public m68ki_cpu_core fpsr(int fpsr) {
		this.io.setIntField(this, 14, fpsr);
		return this;
	}
	/**
	 * FPU Control Register (m68040)<br>
	 * C type : uint
	 */
	@Field(15) 
	public int fpcr() {
		return this.io.getIntField(this, 15);
	}
	/**
	 * FPU Control Register (m68040)<br>
	 * C type : uint
	 */
	@Field(15) 
	public m68ki_cpu_core fpcr(int fpcr) {
		this.io.setIntField(this, 15, fpcr);
		return this;
	}
	/**
	 * Trace 1<br>
	 * C type : uint
	 */
	@Field(16) 
	public int t1_flag() {
		return this.io.getIntField(this, 16);
	}
	/**
	 * Trace 1<br>
	 * C type : uint
	 */
	@Field(16) 
	public m68ki_cpu_core t1_flag(int t1_flag) {
		this.io.setIntField(this, 16, t1_flag);
		return this;
	}
	/**
	 * Trace 0<br>
	 * C type : uint
	 */
	@Field(17) 
	public int t0_flag() {
		return this.io.getIntField(this, 17);
	}
	/**
	 * Trace 0<br>
	 * C type : uint
	 */
	@Field(17) 
	public m68ki_cpu_core t0_flag(int t0_flag) {
		this.io.setIntField(this, 17, t0_flag);
		return this;
	}
	/**
	 * Supervisor<br>
	 * C type : uint
	 */
	@Field(18) 
	public int s_flag() {
		return this.io.getIntField(this, 18);
	}
	/**
	 * Supervisor<br>
	 * C type : uint
	 */
	@Field(18) 
	public m68ki_cpu_core s_flag(int s_flag) {
		this.io.setIntField(this, 18, s_flag);
		return this;
	}
	/**
	 * Master/Interrupt state<br>
	 * C type : uint
	 */
	@Field(19) 
	public int m_flag() {
		return this.io.getIntField(this, 19);
	}
	/**
	 * Master/Interrupt state<br>
	 * C type : uint
	 */
	@Field(19) 
	public m68ki_cpu_core m_flag(int m_flag) {
		this.io.setIntField(this, 19, m_flag);
		return this;
	}
	/**
	 * Extend<br>
	 * C type : uint
	 */
	@Field(20) 
	public int x_flag() {
		return this.io.getIntField(this, 20);
	}
	/**
	 * Extend<br>
	 * C type : uint
	 */
	@Field(20) 
	public m68ki_cpu_core x_flag(int x_flag) {
		this.io.setIntField(this, 20, x_flag);
		return this;
	}
	/**
	 * Negative<br>
	 * C type : uint
	 */
	@Field(21) 
	public int n_flag() {
		return this.io.getIntField(this, 21);
	}
	/**
	 * Negative<br>
	 * C type : uint
	 */
	@Field(21) 
	public m68ki_cpu_core n_flag(int n_flag) {
		this.io.setIntField(this, 21, n_flag);
		return this;
	}
	/**
	 * Zero, inverted for speedups<br>
	 * C type : uint
	 */
	@Field(22) 
	public int not_z_flag() {
		return this.io.getIntField(this, 22);
	}
	/**
	 * Zero, inverted for speedups<br>
	 * C type : uint
	 */
	@Field(22) 
	public m68ki_cpu_core not_z_flag(int not_z_flag) {
		this.io.setIntField(this, 22, not_z_flag);
		return this;
	}
	/**
	 * Overflow<br>
	 * C type : uint
	 */
	@Field(23) 
	public int v_flag() {
		return this.io.getIntField(this, 23);
	}
	/**
	 * Overflow<br>
	 * C type : uint
	 */
	@Field(23) 
	public m68ki_cpu_core v_flag(int v_flag) {
		this.io.setIntField(this, 23, v_flag);
		return this;
	}
	/**
	 * Carry<br>
	 * C type : uint
	 */
	@Field(24) 
	public int c_flag() {
		return this.io.getIntField(this, 24);
	}
	/**
	 * Carry<br>
	 * C type : uint
	 */
	@Field(24) 
	public m68ki_cpu_core c_flag(int c_flag) {
		this.io.setIntField(this, 24, c_flag);
		return this;
	}
	/**
	 * I0-I2<br>
	 * C type : uint
	 */
	@Field(25) 
	public int int_mask() {
		return this.io.getIntField(this, 25);
	}
	/**
	 * I0-I2<br>
	 * C type : uint
	 */
	@Field(25) 
	public m68ki_cpu_core int_mask(int int_mask) {
		this.io.setIntField(this, 25, int_mask);
		return this;
	}
	/**
	 * State of interrupt pins IPL0-IPL2 -- ASG: changed from ints_pending<br>
	 * C type : uint
	 */
	@Field(26) 
	public int int_level() {
		return this.io.getIntField(this, 26);
	}
	/**
	 * State of interrupt pins IPL0-IPL2 -- ASG: changed from ints_pending<br>
	 * C type : uint
	 */
	@Field(26) 
	public m68ki_cpu_core int_level(int int_level) {
		this.io.setIntField(this, 26, int_level);
		return this;
	}
	/**
	 * Stopped state<br>
	 * C type : uint
	 */
	@Field(27) 
	public int stopped() {
		return this.io.getIntField(this, 27);
	}
	/**
	 * Stopped state<br>
	 * C type : uint
	 */
	@Field(27) 
	public m68ki_cpu_core stopped(int stopped) {
		this.io.setIntField(this, 27, stopped);
		return this;
	}
	/**
	 * Last prefetch address<br>
	 * C type : uint
	 */
	@Field(28) 
	public int pref_addr() {
		return this.io.getIntField(this, 28);
	}
	/**
	 * Last prefetch address<br>
	 * C type : uint
	 */
	@Field(28) 
	public m68ki_cpu_core pref_addr(int pref_addr) {
		this.io.setIntField(this, 28, pref_addr);
		return this;
	}
	/**
	 * Data in the prefetch queue<br>
	 * C type : uint
	 */
	@Field(29) 
	public int pref_data() {
		return this.io.getIntField(this, 29);
	}
	/**
	 * Data in the prefetch queue<br>
	 * C type : uint
	 */
	@Field(29) 
	public m68ki_cpu_core pref_data(int pref_data) {
		this.io.setIntField(this, 29, pref_data);
		return this;
	}
	/**
	 * Available address pins<br>
	 * C type : uint
	 */
	@Field(30) 
	public int address_mask() {
		return this.io.getIntField(this, 30);
	}
	/**
	 * Available address pins<br>
	 * C type : uint
	 */
	@Field(30) 
	public m68ki_cpu_core address_mask(int address_mask) {
		this.io.setIntField(this, 30, address_mask);
		return this;
	}
	/**
	 * Implemented status register bits<br>
	 * C type : uint
	 */
	@Field(31) 
	public int sr_mask() {
		return this.io.getIntField(this, 31);
	}
	/**
	 * Implemented status register bits<br>
	 * C type : uint
	 */
	@Field(31) 
	public m68ki_cpu_core sr_mask(int sr_mask) {
		this.io.setIntField(this, 31, sr_mask);
		return this;
	}
	/**
	 * Stores whether we are in instruction mode or group 0/1 exception mode<br>
	 * C type : uint
	 */
	@Field(32) 
	public int instr_mode() {
		return this.io.getIntField(this, 32);
	}
	/**
	 * Stores whether we are in instruction mode or group 0/1 exception mode<br>
	 * C type : uint
	 */
	@Field(32) 
	public m68ki_cpu_core instr_mode(int instr_mode) {
		this.io.setIntField(this, 32, instr_mode);
		return this;
	}
	/**
	 * Stores whether we are processing a reset, bus error, address error, or something else<br>
	 * C type : uint
	 */
	@Field(33) 
	public int run_mode() {
		return this.io.getIntField(this, 33);
	}
	/**
	 * Stores whether we are processing a reset, bus error, address error, or something else<br>
	 * C type : uint
	 */
	@Field(33) 
	public m68ki_cpu_core run_mode(int run_mode) {
		this.io.setIntField(this, 33, run_mode);
		return this;
	}
	/** Indicates if a PMMU available (yes on 030, 040, no on EC030) */
	@Field(34) 
	public int has_pmmu() {
		return this.io.getIntField(this, 34);
	}
	/** Indicates if a PMMU available (yes on 030, 040, no on EC030) */
	@Field(34) 
	public m68ki_cpu_core has_pmmu(int has_pmmu) {
		this.io.setIntField(this, 34, has_pmmu);
		return this;
	}
	/** Indicates if the PMMU is enabled */
	@Field(35) 
	public int pmmu_enabled() {
		return this.io.getIntField(this, 35);
	}
	/** Indicates if the PMMU is enabled */
	@Field(35) 
	public m68ki_cpu_core pmmu_enabled(int pmmu_enabled) {
		this.io.setIntField(this, 35, pmmu_enabled);
		return this;
	}
	/** Indicates the FPU was just reset */
	@Field(36) 
	public int fpu_just_reset() {
		return this.io.getIntField(this, 36);
	}
	/** Indicates the FPU was just reset */
	@Field(36) 
	public m68ki_cpu_core fpu_just_reset(int fpu_just_reset) {
		this.io.setIntField(this, 36, fpu_just_reset);
		return this;
	}
	/** C type : uint */
	@Field(37) 
	public int reset_cycles() {
		return this.io.getIntField(this, 37);
	}
	/** C type : uint */
	@Field(37) 
	public m68ki_cpu_core reset_cycles(int reset_cycles) {
		this.io.setIntField(this, 37, reset_cycles);
		return this;
	}
	/** C type : uint */
	@Field(38) 
	public int cyc_bcc_notake_b() {
		return this.io.getIntField(this, 38);
	}
	/** C type : uint */
	@Field(38) 
	public m68ki_cpu_core cyc_bcc_notake_b(int cyc_bcc_notake_b) {
		this.io.setIntField(this, 38, cyc_bcc_notake_b);
		return this;
	}
	/** C type : uint */
	@Field(39) 
	public int cyc_bcc_notake_w() {
		return this.io.getIntField(this, 39);
	}
	/** C type : uint */
	@Field(39) 
	public m68ki_cpu_core cyc_bcc_notake_w(int cyc_bcc_notake_w) {
		this.io.setIntField(this, 39, cyc_bcc_notake_w);
		return this;
	}
	/** C type : uint */
	@Field(40) 
	public int cyc_dbcc_f_noexp() {
		return this.io.getIntField(this, 40);
	}
	/** C type : uint */
	@Field(40) 
	public m68ki_cpu_core cyc_dbcc_f_noexp(int cyc_dbcc_f_noexp) {
		this.io.setIntField(this, 40, cyc_dbcc_f_noexp);
		return this;
	}
	/** C type : uint */
	@Field(41) 
	public int cyc_dbcc_f_exp() {
		return this.io.getIntField(this, 41);
	}
	/** C type : uint */
	@Field(41) 
	public m68ki_cpu_core cyc_dbcc_f_exp(int cyc_dbcc_f_exp) {
		this.io.setIntField(this, 41, cyc_dbcc_f_exp);
		return this;
	}
	/** C type : uint */
	@Field(42) 
	public int cyc_scc_r_true() {
		return this.io.getIntField(this, 42);
	}
	/** C type : uint */
	@Field(42) 
	public m68ki_cpu_core cyc_scc_r_true(int cyc_scc_r_true) {
		this.io.setIntField(this, 42, cyc_scc_r_true);
		return this;
	}
	/** C type : uint */
	@Field(43) 
	public int cyc_movem_w() {
		return this.io.getIntField(this, 43);
	}
	/** C type : uint */
	@Field(43) 
	public m68ki_cpu_core cyc_movem_w(int cyc_movem_w) {
		this.io.setIntField(this, 43, cyc_movem_w);
		return this;
	}
	/** C type : uint */
	@Field(44) 
	public int cyc_movem_l() {
		return this.io.getIntField(this, 44);
	}
	/** C type : uint */
	@Field(44) 
	public m68ki_cpu_core cyc_movem_l(int cyc_movem_l) {
		this.io.setIntField(this, 44, cyc_movem_l);
		return this;
	}
	/** C type : uint */
	@Field(45) 
	public int cyc_shift() {
		return this.io.getIntField(this, 45);
	}
	/** C type : uint */
	@Field(45) 
	public m68ki_cpu_core cyc_shift(int cyc_shift) {
		this.io.setIntField(this, 45, cyc_shift);
		return this;
	}
	/** C type : uint */
	@Field(46) 
	public int cyc_reset() {
		return this.io.getIntField(this, 46);
	}
	/** C type : uint */
	@Field(46) 
	public m68ki_cpu_core cyc_reset(int cyc_reset) {
		this.io.setIntField(this, 46, cyc_reset);
		return this;
	}
	/** C type : uint */
	@Field(47) 
	public int virq_state() {
		return this.io.getIntField(this, 47);
	}
	/** C type : uint */
	@Field(47) 
	public m68ki_cpu_core virq_state(int virq_state) {
		this.io.setIntField(this, 47, virq_state);
		return this;
	}
	/** C type : uint */
	@Field(48) 
	public int nmi_pending() {
		return this.io.getIntField(this, 48);
	}
	/** C type : uint */
	@Field(48) 
	public m68ki_cpu_core nmi_pending(int nmi_pending) {
		this.io.setIntField(this, 48, nmi_pending);
		return this;
	}
	/** C type : uint */
	@Field(49) 
	public int mmu_crp_aptr() {
		return this.io.getIntField(this, 49);
	}
	/** C type : uint */
	@Field(49) 
	public m68ki_cpu_core mmu_crp_aptr(int mmu_crp_aptr) {
		this.io.setIntField(this, 49, mmu_crp_aptr);
		return this;
	}
	/** C type : uint */
	@Field(50) 
	public int mmu_crp_limit() {
		return this.io.getIntField(this, 50);
	}
	/** C type : uint */
	@Field(50) 
	public m68ki_cpu_core mmu_crp_limit(int mmu_crp_limit) {
		this.io.setIntField(this, 50, mmu_crp_limit);
		return this;
	}
	/** C type : uint */
	@Field(51) 
	public int mmu_srp_aptr() {
		return this.io.getIntField(this, 51);
	}
	/** C type : uint */
	@Field(51) 
	public m68ki_cpu_core mmu_srp_aptr(int mmu_srp_aptr) {
		this.io.setIntField(this, 51, mmu_srp_aptr);
		return this;
	}
	/** C type : uint */
	@Field(52) 
	public int mmu_srp_limit() {
		return this.io.getIntField(this, 52);
	}
	/** C type : uint */
	@Field(52) 
	public m68ki_cpu_core mmu_srp_limit(int mmu_srp_limit) {
		this.io.setIntField(this, 52, mmu_srp_limit);
		return this;
	}
	/** C type : uint */
	@Field(53) 
	public int mmu_tc() {
		return this.io.getIntField(this, 53);
	}
	/** C type : uint */
	@Field(53) 
	public m68ki_cpu_core mmu_tc(int mmu_tc) {
		this.io.setIntField(this, 53, mmu_tc);
		return this;
	}
	@Field(54) 
	public short mmu_sr() {
		return this.io.getShortField(this, 54);
	}
	@Field(54) 
	public m68ki_cpu_core mmu_sr(short mmu_sr) {
		this.io.setShortField(this, 54, mmu_sr);
		return this;
	}
	/** C type : const uint8* */
	@Field(55) 
	public Pointer<Byte > cyc_instruction() {
		return this.io.getPointerField(this, 55);
	}
	/** C type : const uint8* */
	@Field(55) 
	public m68ki_cpu_core cyc_instruction(Pointer<Byte > cyc_instruction) {
		this.io.setPointerField(this, 55, cyc_instruction);
		return this;
	}
	/** C type : const uint8* */
	@Field(56) 
	public Pointer<Byte > cyc_exception() {
		return this.io.getPointerField(this, 56);
	}
	/** C type : const uint8* */
	@Field(56) 
	public m68ki_cpu_core cyc_exception(Pointer<Byte > cyc_exception) {
		this.io.setPointerField(this, 56, cyc_exception);
		return this;
	}
	/**
	 * Interrupt Acknowledge<br>
	 * C type : int_ack_callback_callback*
	 */
	@Field(57) 
	public Pointer<int_ack_callback_callback > int_ack_callback() {
		return this.io.getPointerField(this, 57);
	}
	/**
	 * Interrupt Acknowledge<br>
	 * C type : int_ack_callback_callback*
	 */
	@Field(57) 
	public m68ki_cpu_core int_ack_callback(Pointer<int_ack_callback_callback > int_ack_callback) {
		this.io.setPointerField(this, 57, int_ack_callback);
		return this;
	}
	/**
	 * Breakpoint Acknowledge<br>
	 * C type : bkpt_ack_callback_callback*
	 */
	@Field(58) 
	public Pointer<bkpt_ack_callback_callback > bkpt_ack_callback() {
		return this.io.getPointerField(this, 58);
	}
	/**
	 * Breakpoint Acknowledge<br>
	 * C type : bkpt_ack_callback_callback*
	 */
	@Field(58) 
	public m68ki_cpu_core bkpt_ack_callback(Pointer<bkpt_ack_callback_callback > bkpt_ack_callback) {
		this.io.setPointerField(this, 58, bkpt_ack_callback);
		return this;
	}
	/**
	 * Called when a RESET instruction is encountered<br>
	 * C type : reset_instr_callback_callback*
	 */
	@Field(59) 
	public Pointer<reset_instr_callback_callback > reset_instr_callback() {
		return this.io.getPointerField(this, 59);
	}
	/**
	 * Called when a RESET instruction is encountered<br>
	 * C type : reset_instr_callback_callback*
	 */
	@Field(59) 
	public m68ki_cpu_core reset_instr_callback(Pointer<reset_instr_callback_callback > reset_instr_callback) {
		this.io.setPointerField(this, 59, reset_instr_callback);
		return this;
	}
	/**
	 * Called when a CMPI.L #v, Dn instruction is encountered<br>
	 * C type : cmpild_instr_callback_callback*
	 */
	@Field(60) 
	public Pointer<cmpild_instr_callback_callback > cmpild_instr_callback() {
		return this.io.getPointerField(this, 60);
	}
	/**
	 * Called when a CMPI.L #v, Dn instruction is encountered<br>
	 * C type : cmpild_instr_callback_callback*
	 */
	@Field(60) 
	public m68ki_cpu_core cmpild_instr_callback(Pointer<cmpild_instr_callback_callback > cmpild_instr_callback) {
		this.io.setPointerField(this, 60, cmpild_instr_callback);
		return this;
	}
	/**
	 * Called when a RTE instruction is encountered<br>
	 * C type : rte_instr_callback_callback*
	 */
	@Field(61) 
	public Pointer<rte_instr_callback_callback > rte_instr_callback() {
		return this.io.getPointerField(this, 61);
	}
	/**
	 * Called when a RTE instruction is encountered<br>
	 * C type : rte_instr_callback_callback*
	 */
	@Field(61) 
	public m68ki_cpu_core rte_instr_callback(Pointer<rte_instr_callback_callback > rte_instr_callback) {
		this.io.setPointerField(this, 61, rte_instr_callback);
		return this;
	}
	/**
	 * Called when a TAS instruction is encountered, allows / disallows writeback<br>
	 * C type : tas_instr_callback_callback*
	 */
	@Field(62) 
	public Pointer<tas_instr_callback_callback > tas_instr_callback() {
		return this.io.getPointerField(this, 62);
	}
	/**
	 * Called when a TAS instruction is encountered, allows / disallows writeback<br>
	 * C type : tas_instr_callback_callback*
	 */
	@Field(62) 
	public m68ki_cpu_core tas_instr_callback(Pointer<tas_instr_callback_callback > tas_instr_callback) {
		this.io.setPointerField(this, 62, tas_instr_callback);
		return this;
	}
	/**
	 * Called when an illegal instruction is encountered, allows handling<br>
	 * C type : illg_instr_callback_callback*
	 */
	@Field(63) 
	public Pointer<illg_instr_callback_callback > illg_instr_callback() {
		return this.io.getPointerField(this, 63);
	}
	/**
	 * Called when an illegal instruction is encountered, allows handling<br>
	 * C type : illg_instr_callback_callback*
	 */
	@Field(63) 
	public m68ki_cpu_core illg_instr_callback(Pointer<illg_instr_callback_callback > illg_instr_callback) {
		this.io.setPointerField(this, 63, illg_instr_callback);
		return this;
	}
	/**
	 * Called when the PC changes by a large amount<br>
	 * C type : pc_changed_callback_callback*
	 */
	@Field(64) 
	public Pointer<pc_changed_callback_callback > pc_changed_callback() {
		return this.io.getPointerField(this, 64);
	}
	/**
	 * Called when the PC changes by a large amount<br>
	 * C type : pc_changed_callback_callback*
	 */
	@Field(64) 
	public m68ki_cpu_core pc_changed_callback(Pointer<pc_changed_callback_callback > pc_changed_callback) {
		this.io.setPointerField(this, 64, pc_changed_callback);
		return this;
	}
	/**
	 * Called when the CPU function code changes<br>
	 * C type : set_fc_callback_callback*
	 */
	@Field(65) 
	public Pointer<set_fc_callback_callback > set_fc_callback() {
		return this.io.getPointerField(this, 65);
	}
	/**
	 * Called when the CPU function code changes<br>
	 * C type : set_fc_callback_callback*
	 */
	@Field(65) 
	public m68ki_cpu_core set_fc_callback(Pointer<set_fc_callback_callback > set_fc_callback) {
		this.io.setPointerField(this, 65, set_fc_callback);
		return this;
	}
	/**
	 * Called every instruction cycle prior to execution<br>
	 * C type : instr_hook_callback_callback*
	 */
	@Field(66) 
	public Pointer<instr_hook_callback_callback > instr_hook_callback() {
		return this.io.getPointerField(this, 66);
	}
	/**
	 * Called every instruction cycle prior to execution<br>
	 * C type : instr_hook_callback_callback*
	 */
	@Field(66) 
	public m68ki_cpu_core instr_hook_callback(Pointer<instr_hook_callback_callback > instr_hook_callback) {
		this.io.setPointerField(this, 66, instr_hook_callback);
		return this;
	}
	/** <i>native declaration : m68kcpu.h</i> */
	public static abstract class int_ack_callback_callback extends Callback<int_ack_callback_callback > {
		public abstract int apply(int int_line);
	};
	/** <i>native declaration : m68kcpu.h</i> */
	public static abstract class bkpt_ack_callback_callback extends Callback<bkpt_ack_callback_callback > {
		public abstract void apply(int data);
	};
	/** <i>native declaration : m68kcpu.h</i> */
	public static abstract class reset_instr_callback_callback extends Callback<reset_instr_callback_callback > {
		public abstract void apply();
	};
	/** <i>native declaration : m68kcpu.h</i> */
	public static abstract class cmpild_instr_callback_callback extends Callback<cmpild_instr_callback_callback > {
		/** @param int2 Called when a CMPI.L #v, Dn instruction is encountered */
		public abstract void apply(int int1, int int2);
	};
	/** <i>native declaration : m68kcpu.h</i> */
	public static abstract class rte_instr_callback_callback extends Callback<rte_instr_callback_callback > {
		public abstract void apply();
	};
	/** <i>native declaration : m68kcpu.h</i> */
	public static abstract class tas_instr_callback_callback extends Callback<tas_instr_callback_callback > {
		public abstract int apply();
	};
	/** <i>native declaration : m68kcpu.h</i> */
	public static abstract class illg_instr_callback_callback extends Callback<illg_instr_callback_callback > {
		/** @param int1 Called when an illegal instruction is encountered, allows handling */
		public abstract int apply(int int1);
	};
	/** <i>native declaration : m68kcpu.h</i> */
	public static abstract class pc_changed_callback_callback extends Callback<pc_changed_callback_callback > {
		public abstract void apply(int new_pc);
	};
	/** <i>native declaration : m68kcpu.h</i> */
	public static abstract class set_fc_callback_callback extends Callback<set_fc_callback_callback > {
		public abstract void apply(int new_fc);
	};
	/** <i>native declaration : m68kcpu.h</i> */
	public static abstract class instr_hook_callback_callback extends Callback<instr_hook_callback_callback > {
		public abstract void apply(int pc);
	};
	public m68ki_cpu_core() {
		super();
	}
	public m68ki_cpu_core(Pointer pointer) {
		super(pointer);
	}
}
